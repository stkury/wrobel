module "WRO";

metaclass Root
{
  New
  {
    return address( sess->id );
  };
}

non-transactional class Root extends Object
{
  address{ int sess_id; };

  txt userLogin { label = "Login"; };
  txt password;
  txt newPassword;
  txt newPasswordRepeat;
  time tmp;

  noupdt ref user( User );
  noupdt ref punktyQBE( PunktyQBE );
  noupdt ref atrakcjeQBE( AtrakcjeQBE );

  Initialize
  {
    punktyQBE := ref( 'PunktyQBE', address( sess->id, dajId( false ) ) );
    atrakcjeQBE := ref( 'AtrakcjeQBE', address( sess->id, dajId( false ) ) );
  };

  Calculate
  {
    throw msg( SHOWTEXT, "Calculate called" );
  };

  method doLogin returns ref
  {
    int v_operId;
    roles rs := roles( 'LOGGEDIN', 'user-'+userLogin, txt(this.address.sess_id) );

    select max(id) into out:v_operId from users where username = in:userLogin and haslo = in:password;

    if( v_operId.isnull() )
      throw msg( ST, 'Niepoprawny login lub has³o' );

    parameters params;
    params.add( v_operId );
    params.add( userLogin );
    params.add( rs );
    sess->attachOuterUser( params );

    user := ref( 'User', address( v_operId ) );
    return user;
  };

  method doLogout
  {
    user := ref();
    parameters params;
    params.add( int() );
    params.add( txt() );
    sess->detachUser();
  };

  noupdt method dajId( bool check_user := true ) returns int
  {
    if( check_user )
    {
      int user_id := sess->user_id;
      if( user_id.isnull() ) throw msg( ST, 'User nie zalogowany' );
    }

    int vid;
    select objseq.nextval into out:vid from dual;

    return vid;
  };

  method createUser( txt name, txt pass ) returns User
  {
    int i := dajId( false );
    insert into users( id, username, haslo ) values ( in:i, in:name, in:pass );

    userLogin := name;
    password := pass;
    doLogin();

    return ref( 'User', address( i ) );
  };

  method sendMsg( int touser, txt mess ) returns ref
  {
    int i := dajId();
    insert into messages(id,userid,sender,state,msg) values( in:i, in:touser, OE.sess.userid, 'N', in:mess );

    return ref( "Message", address( i ) );
  };

  method utworzPunkt( txt nazwa := '', int lok_id := '' ) returns ref
  {
    int v_lok_id := lok_id;
    if( lok_id.isnull() )
    {
      ref lok := utworzLokalizajce( nazwa );
      v_lok_id := lok->id;
    }

    int pi := dajId();
    insert into punkty(id,userid,nazwa,lok_id) values( in:pi, OE.sess.userid, in:nazwa, in:v_lok_id );

    recalculate( user->punkty );

    return ref( "Punkt", address( pi ) );
  };

  method utworzLokalizajce( txt nazwa := '' ) returns ref
  {
    int i := dajId();
    insert into lokalizacje(id,userid,nazwa) values( in:i, OE.sess.userid, in:nazwa );

    recalculate( user->lokalizacje );

    return ref( "Lokalizacja", address( i ) );
  };

  method utworzAtrakcje( txt nazwa := '', int pkt_id := '' ) returns ref
  {
    int i := dajId();
    insert into atrakcje(id,userid,nazwa,pkt_id) values( in:i, OE.sess.userid, in:nazwa, in:pkt_id );

    recalculate( user->atrakcje );

    if( !pkt_id.isnull() )
    {
      recalculate( ref( 'AtrakcjePunktu', address(pkt_id) ) );
    }

    return ref( "Atrakcja", address( i ) );
  };

  method usunAtrakcje( txt nazwa := '', int pkt_id := '' ) returns ref
  {
    int i := dajId();
    insert into atrakcje(id,userid,nazwa,pkt_id) values( in:i, OE.sess.userid, in:nazwa, in:pkt_id );

    recalculate( user->atrakcje );

    if( !pkt_id.isnull() )
    {
      recalculate( ref( 'AtrakcjePunktu', address(pkt_id) ) );
    }

    return ref( "Atrakcja", address( i ) );
  };



  method getPunktyQBE returns PunktyQBE
  {
    return ref( 'PunktyQBE', address( sess->id, dajId() ) );
  };
}
