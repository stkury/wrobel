module "WRO";

transactional class Atrakcja extends TransObject
{
  address{ int id; };

  noupdt int id;
  noupdt ref user;
  noupdt ref rj( RozkladJazdy );
  noupdt ref terminarze( TerminarzeAtrakcji );
  noupdt ref uczestnicy( Uczestnicy );

  int pktId;
  noupdt ref punkt( Punkt );

  txt nazwa;
  txt opis;

  Calculate
  {
    id := this.address.id;

    terminarze := ref( 'TerminarzeAtrakcji', address( id ) );
    uczestnicy := ref( 'Uczestnicy', this.address );

    int v_user;
    declare r atrakcje %rowtype;
    begin
    select * into r from atrakcje where id = in:id;
    out:v_user := r.userid;
    out:nazwa := r.nazwa;
    out:opis := r.opis;
    out:pktId := r.pkt_id;
    end;

    user := ref( 'User', address( v_user ) );
    rj   := ref( 'RozkladJazdy', this.address );
    punkt := pktId.isnull() ? ref() : ref( 'Punkt', address( pktId ) );

    roles v_roles := roles( "Wro:user-"+user->username );
    for a in attrs( this )  a.wroles  := v_roles;

    dodajMnieDoUczestnikow.wroles := roles();
    usunMnieZUczestnikow.wroles := roles();
  };

  OnSave
  {
    update atrakcje
    set
    nazwa = in:nazwa,
    opis = in:opis,
    pkt_id = pktId
    where id = in:id;
  };

  method usunAtrakcje()
  {
    delete from atrakcje where id = in:id;

    recalculate( user->atrakcje );
    recalculate( ref( 'AtrakcjePunktu', address(pktId) ) );
  };


  method dodajMnieDoUczestnikow returns Uczestnicy
  {
    ref root := sess->root;
    int i := root->dajId();
    int user_id := sess->user_id;

    for r in ( uczestnicy )
      if( r->user->id = user_id ) throw msg( ST, "U¿ytkownik ju¿ jest na li¶cie uczestników!" );

    insert into uczestnicy(id,atr_id,userid) values( in:i, in:id, OE.sess.userid );

    recalculate( uczestnicy );
    recalculate( root->user->uczestnictwa );

    return uczestnicy;
  };

  method usunMnieZUczestnikow returns Uczestnicy
  {
    ref root := sess->root;
    int user_id := sess->user_id;
    if( user_id.isnull() ) throw msg( ST, 'User nie zalogowany' );

    int usuniety;
    begin
      delete uczestnicy where atr_id = in:id and userid = OE.sess.userid;
      out:usuniety := sql%rowcount;
    end;

    if( usuniety > 0 )
    {
      recalculate( uczestnicy );
      recalculate( root->user->uczestnictwa );
      return uczestnicy;
    }

    throw msg( ST, "Brak u¿ytkownika na li¶cie uczestników!" );
  };
}


non-transactional indexable class AtrakcjeUsera extends ObiektyUsera
{
  Calculate
  {
    super;

    for r in ( select id
               from atrakcje
               where userid = in:user_id
               order by nazwa )
    {
      add( ref( "Atrakcja", address( int(r.ID) ) ) );
    }
  };
}
