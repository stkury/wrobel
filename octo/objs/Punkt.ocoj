module "WRO";

transactional class Punkt extends WroObject
{
  noupdt ref user;
  noupdt ref lokalizacja( Lokalizacja );

  noupdt ref atrakcje( AtrakcjePunktu );

  int lokId;
  txt nazwa;
  txt opis;
  txt zdjecieUrl;

  Calculate
  {
    int v_user;
    declare r punkty %rowtype;
    begin
    select * into r from punkty where id = in:id;
    out:v_user := r.userid;
    out:nazwa  := r.nazwa;
    out:opis   := r.opis;
    out:lokId  := r.lok_id;
    end;

    user := ref( 'User', address( v_user ) );
    lokalizacja := lokId.isnull() ? ref() : ref( 'Lokalizacja', address( lokId ) );

    atrakcje := ref( 'AtrakcjePunktu', this.address );

    roles v_roles := roles( "Wro:user-"+user->username );
    for a in attrs( this )  a.wroles  := v_roles;

    recalculate(lokalizacja);
  };

  OnSave
  {
    update punkty
    set
    nazwa = in:nazwa,
    opis = in:opis,
    lok_id = in:lokId
    where id = in:id;
  };

  method utworzAtrakcje( txt nazwa := '' ) returns ref
  {
    ref root := sess->root;
    return root->utworzAtrakcje( nazwa, id );
  };
}


non-transactional indexable class PunktyUsera extends ObiektyUsera
{
  Calculate
  {
    super;

    for r in ( select id
               from punkty
               where userid = in:user_id
               order by nazwa )
    {
      add( ref( "Punkt", address( int(r.ID) ) ) );
    }
  };
}


non-transactional indexable class AtrakcjePunktu extends IdxObject
{
  address{ int pkt_id; };

  Calculate
  {
    int pkt_id := this.address.pkt_id;

    for r in ( select id
               from atrakcje
               where pkt_id = in:pkt_id
               order by nazwa )
    {
      add( ref( "Atrakcja", address( int(r.ID) ) ) );
    }
  };
}
